# -*- coding: utf-8 -*-
"""movie_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HJaKVILkPMaU9K2UqeKPDVkH_Sn6nZry

# **Movie Classification**

In this project we will classify movies based on various features using following steps:

- Step 1: Data Preprocessing & Exploration.

- Step 2: Data Training & Model Creation.

- Step 3: Performance Evaluation.

We will firstly preprocess & explore the data that we have and check for any null or missing values. If found then we'll clean tha data.

Then we'll proceed by data training i.e. spliting data into training and testing data.

Then train our model by providing training data and once the model will be trained, we will import & initialize the classifier, fit the data into it and perform prediction for the test data.

At last, we will evaluate the performance of the algorithms by error check and accuracy check.

- For the dataset being used in this project [click here](https://www.kaggle.com/balakrishcodes/others?select=Movie_classification.csv)

### **Step 1: Data Preprocessing & Exploration.**
"""

import pandas as pd

data=pd.read_csv('/content/Movie_classification.csv')
data

data.head()

data.tail()

data.shape

data.columns

data.info()

data.describe()

data.isnull().sum()

data['Time_taken'].isnull().sum()

data['Time_taken'].mean()

data['Time_taken'].fillna('157',inplace=True)

data['Time_taken'].isnull().sum()

#Again check for null values
data.isnull().sum()

data.isnull().sum().sum()

"""There are no null or missing values i.e. we can now proceed with further steps."""

data.info()

data1=data.drop(['3D_available','Time_taken','Genre'],axis=1)
data1.info()

#converting data into int datatype to avoid errors below.
prepareddata=data1.astype(int)
prepareddata.head()

"""### **Step 2: Data Training & Model Creation**"""

# Import train_test_split from sklearn.model_selection
from sklearn.model_selection import train_test_split
# Here, x is the data which will have features for classification and y will have our target.
x=prepareddata.drop(['Start_Tech_Oscar'],axis=1)
y=prepareddata['Start_Tech_Oscar']

# Split data into training data and testing data.
#Ratio used for splitting training and testing data is 8:2 respectively
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2,random_state=100)

"""Model Creation using KNN algorithm:"""

#importing knn model
from sklearn.neighbors import KNeighborsClassifier
clfr=KNeighborsClassifier(n_neighbors=20)

#Fitting data into the model.
clfr.fit(x_train, y_train)

# Making predictions 
pred= clfr.predict(x_test)

pred

"""Model Creation using Logistic regression algorithm"""

from sklearn.linear_model import LogisticRegression
clfr1=LogisticRegression()

clfr1.fit(x_train, y_train)

pred1= clfr1.predict(x_test)

pred1

"""Model using decision tree classifier algorithm"""

from sklearn.tree import DecisionTreeClassifier
clfr2=DecisionTreeClassifier()

clfr2.fit(x_train, y_train)

pred2= clfr2.predict(x_test)

pred2

"""### **Step 3: Performance Evaluation**"""

import numpy as np
from sklearn.metrics import mean_squared_error
print("Model\t\t\t       RootMeanSquareError   \t\t   Accuracy of the model") 
print("""KNN                        \t\t {:.4f} \t \t\t {:.4f}""".format(  np.sqrt(mean_squared_error(y_test, pred)), clfr.score(x_train,y_train)))
print("""Logistic Regression        \t\t {:.4f} \t \t\t {:.4f}""".format(  np.sqrt(mean_squared_error(y_test, pred1)), clfr1.score(x_train,y_train)))
print("""Decision Tree Classifier   \t\t {:.4f} \t \t\t {:.4f}""".format(  np.sqrt(mean_squared_error(y_test, pred2)), clfr2.score(x_train,y_train)))

"""Conclusion drawn:

- For this project i.e. Movies classification we have used KNN Classification algorithm, logistic regression algorithm and decision tree classifier.

- The accuracy of KNN model is 60.40% & the error  is 0.6493.

- The accuracy of Logistic Regression model is 58.66% & the error  is 0.6417.

- The accuracy of Decision Tree Classifier model is 1.00% & the error  is 0.6183.

- Decision Tree classifier has the highest accuracy and least error among other algorithms for this project.






"""